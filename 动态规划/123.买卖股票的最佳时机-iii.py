#
# @lc app=leetcode.cn id=123 lang=python3
#
# [123] 买卖股票的最佳时机 III
#
# https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iii/description/
#
# algorithms
# Hard (51.44%)
# Likes:    715
# Dislikes: 0
# Total Accepted:    97.9K
# Total Submissions: 190.1K
# Testcase Example:  '[3,3,5,0,0,3,1,4]'
#
# 给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。
# 
# 设计一个算法来计算你所能获取的最大利润。你最多可以完成 两笔 交易。
# 
# 注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
# 
# 
# 
# 示例 1:
# 
# 
# 输入：prices = [3,3,5,0,0,3,1,4]
# 输出：6
# 解释：在第 4 天（股票价格 = 0）的时候买入，在第 6 天（股票价格 = 3）的时候卖出，这笔交易所能获得利润 = 3-0 = 3 。
# 随后，在第 7 天（股票价格 = 1）的时候买入，在第 8 天 （股票价格 = 4）的时候卖出，这笔交易所能获得利润 = 4-1 = 3 。
# 
# 示例 2：
# 
# 
# 输入：prices = [1,2,3,4,5]
# 输出：4
# 解释：在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4
# 。   
# 注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。   
# 因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。
# 
# 
# 示例 3：
# 
# 
# 输入：prices = [7,6,4,3,1] 
# 输出：0 
# 解释：在这个情况下, 没有交易完成, 所以最大利润为 0。
# 
# 示例 4：
# 
# 
# 输入：prices = [1]
# 输出：0
# 
# 
# 
# 
# 提示：
# 
# 
# 1 
# 0 
# 
# 
#

# @lc code=start
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        ## 我们需要定义dp table，明确我们的状态和选择
        # dp[i][k][0] 代表现在是第i+1天（i是索引所以+1）
        # 至多完成k次交易，当前状态是不持有股票的情况下的最大收益
        # dp[i][k][1]不是最优的因为持有股票肯定不是最大收益
        n = len(prices)
        max_k = 2 # 这道题相当于k = 2
        dp = [[0, float("-INF")] for _ in range(max_k+1)]

        # 最难的是定义base case
        # dp[k][0] = 0 第0天啥都没开始呢，利润当然是0
        # dp[k][1] = -INF 第0天不可能持有股票，所以利润也用不可能的负无穷表示

        # 可以优化一下空间因为当前只和上一轮迭代相关
        # 记住这边优化空间要采用逆序

        for i in range(1, n+1):
            for k in range(max_k, 0, -1):
                dp[k][0] = max(
                    dp[k][0], # rest
                    dp[k][1] + prices[i-1] # sell
                ) ## 今天我没有持有股票说明我昨天要么买，要么持有的股票卖掉了
                dp[k][1] = max(
                    dp[k][1], # rest
                    dp[k-1][0] - prices[i-1] # buy
                ) ## 今天我持有股票说明我昨天要么也持有但是没卖，要么就是新开仓买了股票
        return dp[2][0]
# @lc code=end

